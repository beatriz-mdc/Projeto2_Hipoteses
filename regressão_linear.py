# -*- coding: utf-8 -*-
"""regressão_linear.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DZWy7BIm7HQy5aalpebdGpOiZBrneKwV
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

Hipótese: "Músicas com BPM (Beats Per Minute) mais altos fazem mais sucesso em termos de streams no Spotify"

df = pd.read_csv('tabelas_unificadas.csv')  # Substitua pelo nome do seu arquivo
df.head()

print(df.columns)

X = df[['bpm']]  # variável independente
y = df['streams_limpo']  # variável dependente

modelo = LinearRegression()
modelo.fit(X, y)

# Previsões
y_pred = modelo.predict(X)

print("Inclinação (coeficiente):", modelo.coef_[0])
print("Intercepto:", modelo.intercept_)
print("R² (coeficiente de determinação):", r2_score(y, y_pred))

plt.figure(figsize=(10,6))
plt.scatter(X, y, alpha=0.5, label='Dados reais')
plt.plot(X, y_pred, color='red', linewidth=2, label='Regressão Linear')
plt.title('Relação entre BPM e Streams no Spotify')
plt.xlabel('BPM')
plt.ylabel('Streams')
plt.legend()
plt.grid(True)
plt.show()

# Resultado: hipótese indeterminada, não é possível identificar relação entre as variáveis.

# Hipótese: "As músicas mais populares no ranking do Spotify também possuem um comportamento semelhante em outras plataformas como Deezer"

X = df[['in_spotify_charts']]  # variável independente
y = df['in_deezer_charts']  # variável dependente

modelo = LinearRegression()
modelo.fit(X, y)

# Previsões
y_pred = modelo.predict(X)

print("Inclinação (coeficiente):", modelo.coef_[0])
print("Intercepto:", modelo.intercept_)
print("R² (coeficiente de determinação):", r2_score(y, y_pred))

plt.figure(figsize=(10,6))
plt.scatter(X, y, alpha=0.6, label='Dados reais')
plt.plot(X, y_pred, color='red', label='Regressão linear')
plt.xlabel('Ranking Spotify')
plt.ylabel('Ranking Deezer')
plt.title('Correlação entre popularidade no Spotify e Deezer')
plt.legend()
plt.grid(True)
plt.show()

# Resultado: hipótese verdadeira.

# Hipótese: "A presença de uma música em um maior número de playlists está relacionada com um maior número de streams"

X = df[['total_playlists']]  # variável independente
y = df['streams_limpo']  # variável dependente

modelo = LinearRegression()
modelo.fit(X, y)

# Previsões
y_pred = modelo.predict(X)

print("Inclinação (coeficiente):", modelo.coef_[0])
print("Intercepto:", modelo.intercept_)
print("R² (coeficiente de determinação):", r2_score(y, y_pred))

plt.figure(figsize=(10,6))
plt.scatter(X, y, alpha=0.5, label='Dados reais')
plt.plot(X, y_pred, color='red', linewidth=2, label='Regressão Linear')
plt.title('Participação Playlists e Streams')
plt.xlabel('Playlists')
plt.ylabel('Streams')
plt.legend()
plt.grid(True)
plt.show()

# Resultado: hipótese verdadeira.

# Hipótese: "Artistas com maior número de músicas no Spotify têm mais streams"

df = pd.read_csv('artistas_streams_musica.csv')  # Substitua pelo nome do seu arquivo
df.head()

print(df.columns)

X = df[['quantidade_musica']]  # variável independente
y = df['total_streams']  # variável dependente

modelo = LinearRegression()
modelo.fit(X, y)

# Previsões
y_pred = modelo.predict(X)

print("Inclinação (coeficiente):", modelo.coef_[0])
print("Intercepto:", modelo.intercept_)
print("R² (coeficiente de determinação):", r2_score(y, y_pred))

plt.figure(figsize=(10,6))
plt.scatter(X, y, alpha=0.5, label='Dados reais')
plt.plot(X, y_pred, color='red', linewidth=2, label='Regressão Linear')
plt.title('Quantidade de Músicas e Streams')
plt.xlabel('Quantidade de Músicas')
plt.ylabel('Streams')
plt.legend()
plt.grid(True)
plt.show()

# Resultado: hipótese verdadeira.

# Hipótese: "As características da música influenciam o sucesso em termos de streams no Spotify"

df = pd.read_csv('tabela_caracteristicas.csv')  # Substitua pelo nome do seu arquivo
df.head()

print(df.columns)

X = df[['Valor']]  # variável independente
y = df['streams_limpo']  # variável dependente

modelo = LinearRegression()
modelo.fit(X, y)

# Previsões
y_pred = modelo.predict(X)

print("Inclinação (coeficiente):", modelo.coef_[0])
print("Intercepto:", modelo.intercept_)
print("R² (coeficiente de determinação):", r2_score(y, y_pred))

plt.figure(figsize=(10,6))
plt.scatter(X, y, alpha=0.5, label='Dados reais')
plt.plot(X, y_pred, color='red', linewidth=2, label='Regressão Linear')
plt.title('Características % e Streams')
plt.xlabel('Caracteristicas %')
plt.ylabel('Streams')
plt.legend()
plt.grid(True)
plt.show()

# Resultado: hipótese falsa, as características não influenciam positivamente o número de streams.